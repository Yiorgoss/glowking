// This is your Prisma schema file,
// learn more about it in the docs https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id           Int               @id @default(autoincrement())
  title        String
  description  String            @db.Text()
  imageUrl     String
  hasNext      Boolean           @default(true)
  subtypes     CategorySubtype[]
  categoryEL   CategoryEL        @relation(fields: [categoryELId], references: [id])
  categoryELId Int               @unique
}

model Subtype {
  id          Int               @id @default(autoincrement())
  title       String
  description String            @db.Text()
  imageUrl    String
  hasNext     Boolean           @default(true)
  categories  CategorySubtype[]
  packages    SubtypePackage[]
  subtypeEL   SubtypeEL         @relation(fields: [subtypeELId], references: [id])
  subtypeELId Int               @unique
}

model Package {
  id            Int              @id @default(autoincrement())
  title         String
  description   String           @db.Text()
  tailwindColor String           @default("bg-gradient-to-tl from-slate-200 via-slate-200 to-slate-600")
  price         Int?
  hasNext       Boolean          @default(true)
  subtypes      SubtypePackage[]
  extras        PackageExtra[]
  packageEL     PackageEL        @relation(fields: [packageELId], references: [id])
  packageELId   Int              @unique
}

model Extra {
  id          Int            @id @default(autoincrement())
  title       String
  description String         @db.Text()
  imageUrl    String
  price       Int
  time        Decimal
  hasNext     Boolean        @default(true)
  packages    PackageExtra[]
  //bookings    Booking[]
  extraEL     ExtraEL        @relation(fields: [extraELId], references: [id])
  extraELId   Int            @unique
}

model KeepAlive {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
}

model CategoryEL {
  id          Int       @id @default(autoincrement())
  title       String
  description String    @db.Text()
  category    Category?
}

model SubtypeEL {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text()
  subtype     Subtype?
}

model PackageEL {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text()
  package     Package?
}

model ExtraEL {
  id          Int    @id @default(autoincrement())
  title       String
  description String @db.Text()
  extraId     Extra?
}

model CategorySubtype {
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  subtype    Subtype  @relation(fields: [subtypeId], references: [id])
  subtypeId  Int

  @@id([categoryId, subtypeId])
}

model SubtypePackage {
  subtype   Subtype @relation(fields: [subtypeId], references: [id])
  subtypeId Int
  package   Package @relation(fields: [packageId], references: [id])
  packageId Int

  @@id([subtypeId, packageId])
}

model PackageExtra {
  package   Package @relation(fields: [packageId], references: [id])
  packageId Int
  extra     Extra   @relation(fields: [extraId], references: [id])
  extraId   Int

  @@id([packageId, extraId])
}

//model Booking {
//  id          Int @id @default(autoincrement())
//  name String
//  email String?
//  phone Int
//  location String
//  messageBody String?
//  starttime DateTime
//  endtime DateTime
//  createdAt @default(now())
//  subtypeId Int?
//  packageId Int?
//  categoryId Int?
// // extras  Extra[]
//}

//model extraBookings {
//  booking Booking @relation(fields: [bookingId], references:[id])
//  bookingId Int
//  extra Extra @relation(fields: [extraId], references: [id])
//  extraId Int
//}

// Basic idea behind structure
// Fields:
// HasNext incase the flow needs to be changed.
//        At some point maybe there needs to be
//        next table.
// m-m category subtypes
//     what kind of Category subtypes
//      eg  car -> supercar, smart, jeep etc
// m-m subtypes packages
//      what kind packages in subtype
//       eg smart -> stanndard clean, gold clean
// m-m packages extras
//      what packages what extras
//        eg Gold package has some included pacakges,
// m-m booking extra
//      what extras were chosen foor the booking
//
// 1-1 category categoryEL
// etc
// tailwindColor is usually foor the gradient of paackages but any tailwind css will work
// make sure to include in the tailwind safelist
